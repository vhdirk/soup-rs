// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files)
// DO NOT EDIT

use glib::object::IsA;
#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
use glib::translate::*;
use std::fmt;
#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
use std::ptr;

glib::wrapper! {
    #[doc(alias = "SoupWebsocketExtension")]
    pub struct WebsocketExtension(Object<ffi::SoupWebsocketExtension, ffi::SoupWebsocketExtensionClass>);

    match fn {
        type_ => || ffi::soup_websocket_extension_get_type(),
    }
}

pub const NONE_WEBSOCKET_EXTENSION: Option<&WebsocketExtension> = None;

pub trait WebsocketExtensionExt: 'static {
    //#[cfg(any(feature = "v2_50", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
    //#[doc(alias = "soup_websocket_extension_configure")]
    //fn configure(&self, connection_type: WebsocketConnectionType, params: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 25 }/TypeId { ns_id: 0, id: 25 }) -> Result<(), glib::Error>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
    #[doc(alias = "soup_websocket_extension_get_request_params")]
    #[doc(alias = "get_request_params")]
    fn request_params(&self) -> Option<glib::GString>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
    #[doc(alias = "soup_websocket_extension_get_response_params")]
    #[doc(alias = "get_response_params")]
    fn response_params(&self) -> Option<glib::GString>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
    #[doc(alias = "soup_websocket_extension_process_incoming_message")]
    fn process_incoming_message(&self, header: &mut u8, payload: &glib::Bytes) -> Result<glib::Bytes, glib::Error>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
    #[doc(alias = "soup_websocket_extension_process_outgoing_message")]
    fn process_outgoing_message(&self, header: &mut u8, payload: &glib::Bytes) -> Result<glib::Bytes, glib::Error>;
}

impl<O: IsA<WebsocketExtension>> WebsocketExtensionExt for O {
    //#[cfg(any(feature = "v2_50", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
    //fn configure(&self, connection_type: WebsocketConnectionType, params: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 25 }/TypeId { ns_id: 0, id: 25 }) -> Result<(), glib::Error> {
    //    unsafe { TODO: call ffi:soup_websocket_extension_configure() }
    //}

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
    fn request_params(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::soup_websocket_extension_get_request_params(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
    fn response_params(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::soup_websocket_extension_get_response_params(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
    fn process_incoming_message(&self, header: &mut u8, payload: &glib::Bytes) -> Result<glib::Bytes, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::soup_websocket_extension_process_incoming_message(self.as_ref().to_glib_none().0, header, payload.to_glib_full(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
    fn process_outgoing_message(&self, header: &mut u8, payload: &glib::Bytes) -> Result<glib::Bytes, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::soup_websocket_extension_process_outgoing_message(self.as_ref().to_glib_none().0, header, payload.to_glib_full(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for WebsocketExtension {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("WebsocketExtension")
    }
}
